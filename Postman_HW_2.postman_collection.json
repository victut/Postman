{
	"info": {
		"_postman_id": "a2729b65-f1c3-44cf-b833-e0feb8a36a76",
		"name": "Postman_HW_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20298670"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body is correct\", function () {\r",
							"    pm.response.to.have.body(\"This is the first responce from server!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"let name_user = jsonData.name\r",
							"let name = \"Vika\"\r",
							"console.log(name_user);\r",
							"console.log(name);\r",
							"\r",
							"pm.test(\"check name\", function () {\r",
							"    pm.expect(name_user).to.eql(name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"let age_user = jsonData.age\r",
							"let age = '33'\r",
							"console.log(age_user);\r",
							"console.log(age);\r",
							"\r",
							"pm.test(\"check age\", function () {\r",
							"    pm.expect(age_user).to.eql(age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"let salary_user = jsonData.salary\r",
							"let salary = 1500\r",
							"console.log(salary_user);\r",
							"console.log(salary);\r",
							"\r",
							"pm.test(\"check salary\", function () {\r",
							"    pm.expect(salary_user).to.eql(salary);\r",
							"});   \r",
							"\r",
							"//Спарсить request.\r",
							"let req = JSON.parse(JSON.stringify(request.data));\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"let req_name = req.name\r",
							"let name_user_1 = jsonData.name\r",
							"console.log(name_user_1);\r",
							"console.log(req_name);\r",
							"\r",
							"pm.test(\"check name req\", function () {\r",
							"    pm.expect(name_user_1).to.eql(req_name);\r",
							"});\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"let req_age = req.age\r",
							"let age_user_1 = jsonData.age\r",
							"console.log(age_user_1);\r",
							"console.log(req_age);\r",
							"\r",
							"pm.test(\"check age req\", function () {\r",
							"    pm.expect(age_user_1).to.eql(req_age);\r",
							"});\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"let req_salary = +(req.salary)\r",
							"let salary_user_1 = jsonData.salary\r",
							"console.log(salary_user_1);\r",
							"console.log(req_salary);\r",
							"\r",
							"pm.test(\"check salary req\", function () {\r",
							"    pm.expect(salary_user_1).to.eql(req_salary);\r",
							"});\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let req_salary_1 = req.salary * 4\r",
							"let salary_user_2 = jsonData.family.u_salary_1_5_year\r",
							"console.log(salary_user_2);\r",
							"console.log(req_salary_1);\r",
							"\r",
							"pm.test(\"check u_salary_1_5_year_req\", function () {\r",
							"    pm.expect(salary_user_2).to.eql(req_salary_1);\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Vika",
							"type": "text"
						},
						{
							"key": "age",
							"value": "33",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "1500",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"let query = pm.request.url.query.toObject(); \r",
							"console.log(query);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name req 2\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(query.name);\r",
							"});\r",
							"console.log(jsonData.name);\r",
							"console.log(query.name);\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age req 2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(query.age);\r",
							"});\r",
							"console.log(jsonData.age);\r",
							"console.log(query.age);\r",
							"\r",
							"\r",
							"//Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test(\"check salary req 2\", function () {\r",
							"    pm.expect(jsonData.salary).to.eql(+(query.salary));\r",
							"});\r",
							"console.log(jsonData.salary);\r",
							"console.log(+(query.salary));\r",
							"\r",
							"\r",
							"//Вывести в консоль параметр family из response.\r",
							"console.log(jsonData.family);\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры name.\r",
							"pm.test(\"Object dog have property name\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"console.log(jsonData.family.pets.dog)\r",
							"\r",
							"//Проверить, что у параметра dog есть параметры age.\r",
							"pm.test(\"Object dog have property age\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// Проверить, что параметр name имеет значение Luky.\r",
							"pm.test(\"property name have value Luky\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"console.log(jsonData.family.pets.dog.name);\r",
							"\r",
							"//Проверить, что параметр age имеет значение 4.\r",
							"pm.test(\"property age have value 4\", function () {\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4);\r",
							"});\r",
							"console.log(jsonData.family.pets.dog.age);\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Vika&age=33&salary=1500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Vika"
						},
						{
							"key": "age",
							"value": "33"
						},
						{
							"key": "salary",
							"value": "1500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"console.log(jsonData);\r",
							"\r",
							"//Спарсить request.\r",
							"let query = pm.request.url.query.toObject(); \r",
							"console.log(query);\r",
							"\r",
							"//Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test(\"check name req 2\", function () {\r",
							"    pm.expect(jsonData.name).to.eql(query.name);\r",
							"});\r",
							"console.log(jsonData.name);\r",
							"console.log(query.name);\r",
							"\r",
							"//Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test(\"check age req 2\", function () {\r",
							"    pm.expect(jsonData.age).to.eql(+(query.age));\r",
							"});\r",
							"console.log(jsonData.age);\r",
							"console.log(+(query.age));\r",
							"\r",
							"//Вывести в консоль параметр salary из request.\r",
							"console.log(query.salary);\r",
							"\r",
							"//Вывести в консоль параметр salary из response.\r",
							"console.log(jsonData.salary);\r",
							"\r",
							"//Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(jsonData.salary[0]);\r",
							"\r",
							"//Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"параметр salary:\", jsonData.salary[1]);\r",
							"\r",
							"//Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(\"параметр salary:\", jsonData.salary[2]);\r",
							"\r",
							"//Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"check salary req 3\", function () {\r",
							"    pm.expect(jsonData.salary[0]).to.eql(+(query.salary));\r",
							"});\r",
							"console.log(jsonData.salary[0]);\r",
							"console.log(+(query.salary));\r",
							"\r",
							"//Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let query_salary_1 = query.salary * 2\r",
							"let salary_user_3 = +(jsonData.salary[1])\r",
							"console.log(salary_user_3);\r",
							"console.log(query_salary_1);\r",
							"\r",
							"pm.test(\"check salary*2\", function () {\r",
							"    pm.expect(salary_user_3).to.eql(query_salary_1);\r",
							"});\r",
							"\r",
							"//Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let query_salary_2 = query.salary * 3\r",
							"let salary_user_4 = +(jsonData.salary[2])\r",
							"console.log(salary_user_4);\r",
							"console.log(query_salary_2);\r",
							"\r",
							"pm.test(\"check salary*3\", function () {\r",
							"    pm.expect(salary_user_4).to.eql(query_salary_2);\r",
							"});\r",
							"\r",
							"//Создать в окружении переменную name\r",
							"let person_name = jsonData.name\r",
							"pm.environment.set(\"name\", person_name);\r",
							"//Environments -> + -> Postman_HW_2 -> variable = name -> save -> No Environment = \r",
							"//Postman_HW_2 -> Collection -> Postman_HW_2 -> object_info_4 -> save -> send -> Environment quick look\r",
							"\r",
							"//Создать в окружении переменную age\r",
							"let person_age = jsonData.age\r",
							"pm.environment.set(\"age\", person_age);\r",
							"//Environments -> Postman_HW_2 -> variable = age -> save -> Collection -> Postman_HW_2 -> object_info_4 -> save -> send -> Environment quick look\r",
							"\r",
							"//Создать в окружении переменную salary\r",
							"let person_salary = jsonData.salary[0]\r",
							"pm.environment.set(\"salary\", person_salary);\r",
							"//Environments -> Postman_HW_2 -> variable = salary -> save -> Collection -> Postman_HW_2 -> object_info_4 -> save -> send -> Environment quick look\r",
							"\r",
							"//Передать в окружение переменную name\r",
							"// Params -> value = {{name}} -> save -> send\r",
							"\r",
							"//Передать в окружение переменную age\r",
							"//Params -> value = {{age}} -> save -> send\r",
							"\r",
							"//Передать в окружение переменную salary\r",
							"//Params -> value = {{salary}} -> save -> send\r",
							"\r",
							"//Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"const salary_cycle = [1500, \"3000\", \"4500\"];\r",
							"for(let i = 0; i < salary_cycle.length; i++) {\r",
							"   console.log(salary_cycle[i])\r",
							"};\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"//Вставить параметр salary из окружения в salary\r",
							"//Body -> key = salary -> value = {{salary}}\r",
							"\r",
							"//Вставить параметр age из окружения в age\r",
							"//Body -> key = age -> value = {{age}}\r",
							"\r",
							"//Вставить параметр name из окружения в name\r",
							"//Body -> key = name -> value = {{name}}\r",
							"\r",
							"//Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"//Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"//Спарсить request.\r",
							"let req = JSON.parse(JSON.stringify(request.data));\r",
							"\r",
							"//Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"json response have property start_qa_salary\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"json response have property qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"json response have property qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"json response have property qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"json response have property qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что json response имеет параметр person\r",
							"pm.test(\"json response have property person\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"person\");\r",
							"});\r",
							"console.log(jsonData);\r",
							"\r",
							"//Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"let req_start_qa_salary = +(req.salary)\r",
							"let start_qa_salary_user = jsonData.start_qa_salary\r",
							"console.log(start_qa_salary_user);\r",
							"console.log(req_start_qa_salary);\r",
							"\r",
							"pm.test(\"check start_qa_salary\", function () {\r",
							"    pm.expect(start_qa_salary_user).to.eql(req_start_qa_salary);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary_after_6_months = req.salary * 2\r",
							"let salary_qa_salary_after_6_months = jsonData.qa_salary_after_6_months\r",
							"console.log(salary_qa_salary_after_6_months);\r",
							"console.log(req_salary_after_6_months);\r",
							"\r",
							"pm.test(\"check qa_salary_after_6_months\", function () {\r",
							"    pm.expect(salary_qa_salary_after_6_months).to.eql(req_salary_after_6_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let req_salary_after_12_months = req.salary * 2.7\r",
							"let salary_qa_salary_after_12_months = jsonData.qa_salary_after_12_months\r",
							"console.log(salary_qa_salary_after_12_months);\r",
							"console.log(req_salary_after_12_months);\r",
							"\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(salary_qa_salary_after_12_months).to.eql(req_salary_after_12_months);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let req_qa_salary_after_1_5_year = req.salary * 3.3\r",
							"let salary_qa_salary_after_1_5_year = jsonData['qa_salary_after_1.5_year']\r",
							"console.log(salary_qa_salary_after_1_5_year);\r",
							"console.log(req_qa_salary_after_1_5_year);\r",
							"\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(salary_qa_salary_after_1_5_year).to.eql(req_qa_salary_after_1_5_year);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let req_qa_salary_after_3_5_years = req.salary * 3.8\r",
							"let salary_qa_salary_after_3_5_years = jsonData['qa_salary_after_3.5_years']\r",
							"console.log(salary_qa_salary_after_3_5_years);\r",
							"console.log(req_qa_salary_after_3_5_years);\r",
							"\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(salary_qa_salary_after_3_5_years).to.eql(req_qa_salary_after_3_5_years);\r",
							"});\r",
							"\r",
							"//Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"let req_u_name = +(req.salary) \r",
							"let salary_u_name = jsonData.person.u_name[1];\r",
							"console.log(salary_u_name);\r",
							"console.log(req_u_name);\r",
							"\r",
							"pm.test(\"check u_name\", function () {\r",
							"    pm.expect(salary_u_name).to.eql(req_u_name);\r",
							"});\r",
							"\r",
							"//Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"let req_u_age = +(req.age) \r",
							"let age_u_age = jsonData.person.u_age;\r",
							"console.log(age_u_age);\r",
							"console.log(req_u_age);\r",
							"\r",
							"pm.test(\"check u_age\", function () {\r",
							"    pm.expect(age_u_age).to.eql(req_u_age);\r",
							"});\r",
							"\r",
							"//Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"let req_u_salary_5_years = req.salary * 4.2\r",
							"let salary_u_salary_5_years = jsonData.person.u_salary_5_years\r",
							"console.log(salary_u_salary_5_years);\r",
							"console.log(req_u_salary_5_years);\r",
							"\r",
							"pm.test(\"check qa_salary_after_12_months\", function () {\r",
							"    pm.expect(salary_u_salary_5_years).to.eql(req_u_salary_5_years);\r",
							"});\r",
							"\r",
							"//***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"const salary_cycle_1 = [\"u_age\", \"u_name\", \"u_salary_5_years\"];\r",
							"for(let i = 0; i < salary_cycle_1.length; i++) {\r",
							"   console.log(salary_cycle_1[i])\r",
							"};\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}